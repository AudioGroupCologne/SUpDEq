function spikes2 = decheveigne2023_spikerefractory(spikes, recfun)%DECHEVEIGNE2023_SPIKEREFRACTORY%%   Usage:%     spikes2=spike_dead(spikes,recfun) - implement refractory effects% %   Input parameters:%     spikes: spike times before refractory effects%     recfun: recovery function or dead time%%   Output parameters:%     spikes2: spike times after refractory effects%  %  'recfun' must be number or a handle to a recovery function that takes as its %  argument an inter-spike interval and returns 0 or 1 to indicate whether %  the spike following that interval should remain%   #StatusDoc: Unknown%   #StatusCode: Unknown%   #Verification: Unknown%   #Requirements: Unknown%   #Author: Alain de Cheveigne (2023)%   #Authors: Alejandro Osses (2023): integration in AMT 1.4% This file is licensed unter the GNU General Public License (GPL) either % version 3 of the license, or any later version as published by the Free Software % Foundation. Details of the GPLv3 can be found in the AMT directory "licences" and % at <https://www.gnu.org/licenses/gpl-3.0.html>. % You can redistribute this file and/or modify it under the terms of the GPLv3. % This file is distributed without any warranty; without even the implied warranty % of merchantability or fitness for a particular purpose. if nargin<1; error('!'); endif nargin<2||isempty(recfun); recfun=0.001; end % 1 ms dead timeif isa(recfun, 'numeric') % dead time    dead_time=recfun;    recfun=@dt;endif ~isa(recfun,'function_handle'); error('!'); end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%spikes2=zeros(size(spikes));spikes2(1)=spikes(1); % keep first spikeiOut=1;for iIn=2:numel(spikes)    isi=spikes(iIn)-spikes2(iOut);    if recfun(isi) % keep this spike        spikes2(iOut+1)=spikes(iIn);        iOut=iOut+1;    end   endspikes2=spikes2(1:iOut-1);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    if nargout==0    disp('spike_refractory: no output requested, plot');    fig=figure(100);    binwidth=0.00001;    subplot 121    spike_isih(spikes,binwidth,fig);    xlim([0,0.01]); % 10 ms    subplot 122    spike_isih(spikes2,binwidth,fig);    xlim([0 0.01]);    title('with refractory effects')    disp(['spike rate (spikes/s): ', num2str(spike_rate(spikes2))])    clear spikes2;end% local function can see parameter 'dead'function ok=dt(interval)    if interval<dead_time        ok=0;     else        ok=1;    endendend % function% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% function ok=example_recovery_function(interval)% %ok=recovery_function(d) - example recovery function% %% %   ok: 0: delete, 1: keep% %% %   interval: (s) interspike interval%     % if interval<=0; error('!'); end% % % the function is piecewise linear after a dead time% % % 0.8 ms dead time% if interval<0.0008; %     ok=0; % % % full recovery after 5 ms% elseif interval>=0.005; %     ok=1; % % % probability of keeping varies from 0 to 0.5 from 0.8 to 1 ms% elseif interval<0.001;%     if rand<(interval-0.0008)/0.0002*0.5;%         ok=1;  %     else%         ok=0; %     end% % % probability of keeping varies from 0.5 to 0.9 from 1 to 2 ms% elseif interval<0.002;%     if rand<0.5+(interval-0.001)/0.001*0.4;%         ok=1;  %     else%         ok=0; %     end% % % probability of keeping varies from 0.9 to 1 from 2 to 5 ms% elseif interval>=0.002 && interval<0.005%     if rand<0.9+(interval-0.002)/0.003*0.1%         ok=1; %     else%         ok=0; %     end% end%     % end % function
%
%   Url: http://amtoolbox.org/amt-1.4.0/doc/modelstages/decheveigne2023_spikerefractory.php

function spikes2 = decheveigne2023_spikerefractory(spikes, recfun)%DECHEVEIGNE2023_SPIKEREFRACTORY%%   Usage:%     spikes2=spike_dead(spikes,recfun) - implement refractory effects% %   Input parameters:%     spikes: spike times before refractory effects%     recfun: recovery function or dead time%%   Output parameters:%     spikes2: spike times after refractory effects%  %  'recfun' must be number or a handle to a recovery function that takes as its %  argument an inter-spike interval and returns 0 or 1 to indicate whether %  the spike following that interval should remain%   #StatusDoc: Unknown%   #StatusCode: Unknown%   #Verification: Unknown%   #Requirements: Unknown%   #Author: Alain de Cheveigne (2023)%   #Authors: Alejandro Osses (2023): integration in AMT 1.4% This file is licensed unter the GNU General Public License (GPL) either % version 3 of the license, or any later version as published by the Free Software % Foundation. Details of the GPLv3 can be found in the AMT directory "licences" and % at <https://www.gnu.org/licenses/gpl-3.0.html>. % You can redistribute this file and/or modify it under the terms of the GPLv3. % This file is distributed without any warranty; without even the implied warranty % of merchantability or fitness for a particular purpose. if nargin<1; error('!'); endif nargin<2||isempty(recfun); recfun=0.001; end % 1 ms dead timeif isa(recfun, 'numeric') % dead time    dead_time=recfun;    recfun=@dt;endif ~isa(recfun,'function_handle'); error('!'); end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%spikes2=zeros(size(spikes));spikes2(1)=spikes(1); % keep first spikeiOut=1;for iIn=2:numel(spikes)    isi=spikes(iIn)-spikes2(iOut);    if recfun(isi) % keep this spike        spikes2(iOut+1)=spikes(iIn);        iOut=iOut+1;    end   endspikes2=spikes2(1:iOut-1);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    if nargout==0    disp('spike_refractory: no output requested, plot');    fig=figure(100);    binwidth=0.00001;    subplot 121    spike_isih(spikes,binwidth,fig);    xlim([0,0.01]); % 10 ms    subplot 122    spike_isih(spikes2,binwidth,fig);    xlim([0 0.01]);    title('with refractory effects')    disp(['spike rate (spikes/s): ', num2str(spike_rate(spikes2))])    clear spikes2;end% local function can see parameter 'dead'function ok=dt(interval)    if interval<dead_time        ok=0;     else        ok=1;    endendend % function% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% function ok=example_recovery_function(interval)% %ok=recovery_function(d) - example recovery function% %% %   ok: 0: delete, 1: keep% %% %   interval: (s) interspike interval%     % if interval<=0; error('!'); end% % % the function is piecewise linear after a dead time% % % 0.8 ms dead time% if interval<0.0008; %     ok=0; % % % full recovery after 5 ms% elseif interval>=0.005; %     ok=1; % % % probability of keeping varies from 0 to 0.5 from 0.8 to 1 ms% elseif interval<0.001;%     if rand<(interval-0.0008)/0.0002*0.5;%         ok=1;  %     else%         ok=0; %     end% % % probability of keeping varies from 0.5 to 0.9 from 1 to 2 ms% elseif interval<0.002;%     if rand<0.5+(interval-0.001)/0.001*0.4;%         ok=1;  %     else%         ok=0; %     end% % % probability of keeping varies from 0.9 to 1 from 2 to 5 ms% elseif interval>=0.002 && interval<0.005%     if rand<0.9+(interval-0.002)/0.003*0.1%         ok=1; %     else%         ok=0; %     end% end%     % end % function
