function pulse_train=decheveigne2023_spiketopulse(spikes,sr,kernel)%DECHEVEIGNE2023_SPIKETOPULSE%%   Usage:%     pulse_train=decheveigne2023_spike_to_pulse(spikes,sr,kernel) - convert spike times to pulses%%   Input parameters:%     spikes: spike times (s)%     sr: sampling rate (Hz)%     kernel: pulse shape function (default: []);%%   Output parameters:%     pulse_train: time series of pulses%   #StatusDoc: Unknown%   #StatusCode: Unknown%   #Verification: Unknown%   #Requirements: Unknown%   #Author: Alain de Cheveigne (2023)%   #Authors: Alejandro Osses (2023): integration in AMT 1.4% This file is licensed unter the GNU General Public License (GPL) either % version 3 of the license, or any later version as published by the Free Software % Foundation. Details of the GPLv3 can be found in the AMT directory "licences" and % at <https://www.gnu.org/licenses/gpl-3.0.html>. % You can redistribute this file and/or modify it under the terms of the GPLv3. % This file is distributed without any warranty; without even the implied warranty % of merchantability or fitness for a particular purpose. if nargin<2; error('!'); endif nargin<3; kernel=[]; end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%N=ceil(max(spikes)*sr);pulse_train=zeros(N,1);for iSpike=1:numel(spikes)    j=ceil(spikes(iSpike)*sr);    pulse_train(j)=pulse_train(j)+1;endif ~isempty(kernel)    pulse_train=conv(pulse_train,kernel);end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%if nargout==0    disp('spike_to_pulse: no output requested, plot');    t=linspace(0, spikes(11), round(sr*spikes(11)));    if isempty(kernel)        plot(t, pulse_train(1:numel(t)), '.-'); ylim([0 1.5]);    else        plot(t, pulse_train(1:numel(t))); ylim([0 1.5]);    end    xlabel('time (s)'); title('first 10 pulses');endend % function
%
%   Url: http://amtoolbox.org/amt-1.4.0/doc/modelstages/decheveigne2023_spiketopulse.php

function pulse_train=decheveigne2023_spiketopulse(spikes,sr,kernel)%DECHEVEIGNE2023_SPIKETOPULSE%%   Usage:%     pulse_train=decheveigne2023_spike_to_pulse(spikes,sr,kernel) - convert spike times to pulses%%   Input parameters:%     spikes: spike times (s)%     sr: sampling rate (Hz)%     kernel: pulse shape function (default: []);%%   Output parameters:%     pulse_train: time series of pulses%   #StatusDoc: Unknown%   #StatusCode: Unknown%   #Verification: Unknown%   #Requirements: Unknown%   #Author: Alain de Cheveigne (2023)%   #Authors: Alejandro Osses (2023): integration in AMT 1.4% This file is licensed unter the GNU General Public License (GPL) either % version 3 of the license, or any later version as published by the Free Software % Foundation. Details of the GPLv3 can be found in the AMT directory "licences" and % at <https://www.gnu.org/licenses/gpl-3.0.html>. % You can redistribute this file and/or modify it under the terms of the GPLv3. % This file is distributed without any warranty; without even the implied warranty % of merchantability or fitness for a particular purpose. if nargin<2; error('!'); endif nargin<3; kernel=[]; end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%N=ceil(max(spikes)*sr);pulse_train=zeros(N,1);for iSpike=1:numel(spikes)    j=ceil(spikes(iSpike)*sr);    pulse_train(j)=pulse_train(j)+1;endif ~isempty(kernel)    pulse_train=conv(pulse_train,kernel);end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%if nargout==0    disp('spike_to_pulse: no output requested, plot');    t=linspace(0, spikes(11), round(sr*spikes(11)));    if isempty(kernel)        plot(t, pulse_train(1:numel(t)), '.-'); ylim([0 1.5]);    else        plot(t, pulse_train(1:numel(t))); ylim([0 1.5]);    end    xlabel('time (s)'); title('first 10 pulses');endend % function
