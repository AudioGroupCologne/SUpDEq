% realCAD viewer for VariSphear CAD files 
%
% Version R12-1205
%
% 2012 by Benjamin Bernschütz
%         Cologne University of Applied Sciences
%         Institute of Communication Systems
%         mail benjamin.bernschuetz@fh-koeln.de
%         GSM   +49 171 4176069
%         Phone +49 221 8275-2496
%
% To improve the visual impression, the projection can be changed to
% a "perspective" projection instead of the default "orthographic"
% projection. Set the projection propertie to 'perspective', e.g.:
%
% >> set(gca,'Projection','perspective'); 
%
% Options to change in the "cadopt.mat" file:
%
% opt.array           {[0,1]} Disables/Enables the array 
% opt.soundsource     {[0,1]} Disables/Enables the sound sources
% opt.objects         {[0,1]} Disables/Enables the objects
% opt.lengthroom      {[0,1]} Disables/Enables the length measures
% opt.surfaceroom     {[0,1]} Disables/Enables the surface measures
% opt.volumeroom      {[0,1]} Disables/Enables the volume measures
% opt.lengthobjects   {[0,1]} Disables/Enables the object length measures
% opt.surfaceobjects  {[0,1]} Disables/Enables the object surface measures
% opt.arraysource     {[0,1]} Disables/Enables the object surface measures
% opt.handovers       {[0,1]} Disables/Enables the transform handovers
% opt.surfmesh        {[0,1]} Disables/Enables the surface mesh 
% opt.minlength       {float} Set minimum length quantity to display [m]
% opt.minsurf         {float} Set minimum surface quantity to display [m^2]
% opt.decimals        {[10,100]} Set decimal places to display:
%                                10: 0.x 100: 0.xx
%
% If the file does not exist it is auto-generated by realCADviewer()

function realCADviewer(file, basicModelColor, ObjForcedColor)

% Open file browser
if nargin == 0
    [file, filepath] = uigetfile({'*.mat','Matlab Files (*.mat) Containing VS Venue Data'});
    if file==0
        return
    end
    load([filepath,file],'venue');
else
    load(file,'venue');
end

if ~exist('venue','var')
    error('The selected file is not a realCAD venue file');
end

if nargin < 2
    basicModelColor = 'k';
end

if nargin < 3
    ObjForcedColor = [];
end

obj3d       = venue.obj3d;
Objects     = venue.Objects;
h1          = venue.h1;
h2          = venue.h2;
arrayheigth = venue.Arrayheigth;

try
    load('cadopt.mat','opt');
catch
    fprintf('CAD option file not found. A new file with default options has been generated: cadopt.mat. To change the CAD options, edit the struct in the option file.');
    opt.array           = 1;
    opt.soundsource     = 1;
    opt.objects         = 1;
    opt.lengthroom      = 0;
    opt.surfaceroom     = 0;
    opt.volumeroom      = 0;
    opt.lengthobjects   = 0;
    opt.surfaceobjects  = 0;
    opt.arraysource     = 1;
    opt.handovers       = 0;
    opt.surfmesh        = 0;
    opt.minlength       = 0.3;
    opt.minsurf         = 1;
    opt.decimals        = 10;
    save('cadopt.mat','opt');
end

set(gcf,'Color', 'w');


numberofcorners = size(obj3d,1);

if opt.array == 1 %Array
    line([0 0],[0 0], [0 0], 'Marker','o','MarkerSize',2,'Color','R','MarkerFaceColor','R'); %Array knee
    line([0 0],[0 0], [0 -arrayheigth], 'Color','R'); %Array boom
    line([0.20 0.20],[0 0], [-arrayheigth -arrayheigth], 'Marker','o','MarkerSize',1,'Color','R','MarkerFaceColor','R'); %Direction 0°
    line([-0.25 -0.25],[-0.25 0.25], [-arrayheigth -arrayheigth], 'Color','R'); %Array Groundplane
    line([0.25 0.25],[-0.25 0.25], [-arrayheigth -arrayheigth], 'Color','R');
    line([-0.25 0.25],[0.25 0.25], [-arrayheigth -arrayheigth], 'Color','R');
    line([-0.25 0.25],[-0.25 -0.25], [-arrayheigth -arrayheigth], 'Color','R');
    line([.4 -0.1],[0 0], [0 0], 'Color','R'); %Array Arm
end

if numberofcorners > 0
    hold on
    for cornerstep = 1:numberofcorners %Plot Corners
        cornerstep1 = mod((cornerstep+1),numberofcorners+1);
        if cornerstep1 == 0
            cornerstep1 = 1;
        end
        %PLOT CEILING 2D
        azim1c = obj3d(cornerstep,1,1);
        elev1c = obj3d(cornerstep,2,1);
        radius1c = obj3d(cornerstep,3,1);
        [x1c,y1c,z1c] = sph2cart(azim1c/180*pi,-elev1c/180*pi+pi/2,radius1c);
        azim2c = obj3d(cornerstep1,1,1);
        elev2c = obj3d(cornerstep1,2,1);
        radius2c = obj3d(cornerstep1,3,1);
        [x2c,y2c,z2c] = sph2cart(azim2c/180*pi,-elev2c/180*pi+pi/2,radius2c);
        line([x1c x2c],[y1c y2c], [z1c, z2c],'color',basicModelColor);
        if cornerstep == 1 %Set Ceiling Marker
            line([x1c x1c],[y1c y1c], [z1c, z1c], 'Marker','^','MarkerSize',6,'color',basicModelColor);
        end
        if opt.lengthroom == 1
            lengthofvector = sqrt((x1c-x2c).^2+(y1c-y2c).^2+(z1c-z2c).^2);
            if lengthofvector > opt.minlength
                lengthofvector = round(opt.decimals*lengthofvector)/opt.decimals;
                text((x1c+x2c)./2,(y1c+y2c)./2,(z1c+z2c)./2, [num2str(lengthofvector),'m'],'FontSize',8)
            end
        end
        
        %PLOT FLOOR 2D
        azim1f = obj3d(cornerstep,1,2);
        elev1f = obj3d(cornerstep,2,2);
        radius1f = obj3d(cornerstep,3,2);
        [x1f,y1f,z1f] = sph2cart(azim1f/180*pi,-elev1f/180*pi+pi/2,radius1f);
        azim2f = obj3d(cornerstep1,1,2);
        elev2f = obj3d(cornerstep1,2,2);
        radius2f = obj3d(cornerstep1,3,2);
        [x2f,y2f,z2f] = sph2cart(azim2f/180*pi,-elev2f/180*pi+pi/2,radius2f);
        line([x1f x2f],[y1f y2f], [z1f, z2f],'color',basicModelColor);
        if opt.lengthroom
            lengthofvector = sqrt((x1f-x2f).^2+(y1f-y2f).^2+(z1f-z2f).^2);
            if lengthofvector > opt.minlength
                lengthofvector = round(opt.decimals*lengthofvector)/opt.decimals;
                text((x1f+x2f)./2,(y1f+y2f)./2,(z1f+z2f)./2, [num2str(lengthofvector),'m'],'FontSize',8)
            end
        end
    end
    
    %Connecting the Corners
    for cornerstep = 1:numberofcorners
        azim1c = obj3d(cornerstep,1,1);
        elev1c = obj3d(cornerstep,2,1);
        radius1c = obj3d(cornerstep,3,1);
        [x1c,y1c,z1c] = sph2cart(azim1c/180*pi,-elev1c/180*pi+pi/2,radius1c);
        azim1f = obj3d(cornerstep,1,2);
        elev1f = obj3d(cornerstep,2,2);
        radius1f = obj3d(cornerstep,3,2);
        [x1f,y1f,z1f] = sph2cart(azim1f/180*pi,-elev1f/180*pi+pi/2,radius1f);
        line([x1c x1f],[y1c y1f], [z1c, z1f],'color',basicModelColor);
        if opt.lengthroom == 1
            lengthofvector  =sqrt((x1c-x1f).^2+(y1c-y1f).^2+(z1c-z1f).^2);
            if lengthofvector > opt.minlength
                lengthofvector = round(opt.decimals*lengthofvector)/opt.decimals;
                text((x1c+x1f)./2,(y1c+y1f)./2,(z1c+z1f)./2, [num2str(lengthofvector),'m'],'FontSize',8)
            end
        end
    end
end

%Wall Surfaces
if numberofcorners > 0 && opt.surfaceroom
    totalsurface = 0;
    for cornerstep = 1:numberofcorners
        cornerstep1 = mod((cornerstep+1),numberofcorners+1);
        if cornerstep1 == 0
            cornerstep1 = 1;
        end
        
        %Two Ceiling Points
        azim1c   = obj3d(cornerstep,1,1);
        elev1c   = obj3d(cornerstep,2,1);
        radius1c = obj3d(cornerstep,3,1);
        azim2c   = obj3d(cornerstep1,1,1);
        elev2c   = obj3d(cornerstep1,2,1);
        radius2c = obj3d(cornerstep1,3,1);
        
        %Two Floor Points
        azim1f   = obj3d(cornerstep,1,2);
        elev1f   = obj3d(cornerstep,2,2);
        radius1f = obj3d(cornerstep,3,2);
        azim2f   = obj3d(cornerstep1,1,2);
        elev2f   = obj3d(cornerstep1,2,2);
        radius2f = obj3d(cornerstep1,3,2);
        
        %Sph2Cart
        [x1c,y1c,z1c] = sph2cart(azim1c/180*pi,-elev1c/180*pi+pi/2,radius1c);
        [x2c,y2c,z2c] = sph2cart(azim2c/180*pi,-elev2c/180*pi+pi/2,radius2c);
        [x1f,y1f,z1f] = sph2cart(azim1f/180*pi,-elev1f/180*pi+pi/2,radius1f);
        [x2f,y2f,z2f] = sph2cart(azim2f/180*pi,-elev2f/180*pi+pi/2,radius2f);
        
        %Vector 1c2c and Vector 1c1f (Triangle 1)
        V1c2c = [x2c,y2c,z2c]-[x1c,y1c,z1c];
        V1c1f = [x1f,y1f,z1f]-[x1c,y1c,z1c];
        ApartONE = 0.5*sqrt(sum(cross(V1c2c,V1c1f).^2));
        
        %Vector 1f2c and Vector 1f2f (Triangle 2)
        V1f2c = [x2c,y2c,z2c]-[x1f,y1f,z1f];
        V1f2f = [x2f,y2f,z2f]-[x1f,y1f,z1f];
        ApartTWO = 0.5*sqrt(sum(cross(V1f2c,V1f2f).^2));
        surfacequadrant = round(opt.decimals*(ApartONE+ApartTWO))/opt.decimals;
        totalsurface = totalsurface+surfacequadrant;
        if surfacequadrant >= opt.minsurf
            text((x1c+x2f)./2,(y1c+y2f)./2,(z1c+z2f)./2, [num2str(surfacequadrant),'m²'],'FontSize',8,'HorizontalAlignment','center')
        end
    end
    
    fprintf('Calculating surfaces...');
    surface = fcsurface(obj3d);
    fprintf(' done.\n');
    totalsurface = totalsurface+surface.ceiling+surface.floor;
    text(0,0,0, ['Ceiling ',num2str(surface.ceiling),'m²',', Floor ',num2str(surface.floor),'m²', ', Total ',num2str(totalsurface),'m²'],...
        'FontSize',8, 'HorizontalAlignment','center')
end

% Room Volume
if numberofcorners > 2 && opt.volumeroom
    RoomGeo = volume3d(obj3d);
    text(0,0,0, ['Room Volume: ',num2str(RoomGeo.RoomVolume),'m³'],...
        'FontSize',8, 'HorizontalAlignment','center')
end

% PLOT OBJECTS (SOURCE,LINE,SQUARE)
NumberOfObjects=size(Objects,1);

for objectnumber=1:NumberOfObjects    %Object Plot Loop
    
    objcolor = [Objects(objectnumber,2),Objects(objectnumber,3),Objects(objectnumber,4)];
    
    if ~isempty(ObjForcedColor)
        objcolor = ObjForcedColor;
    end
    
    if Objects(objectnumber,1) == 1 && opt.soundsource %Object Type Source
        p1x = Objects(objectnumber,5);
        p1y = Objects(objectnumber,6);
        p1z = Objects(objectnumber,7);
        line([p1x p1x],[p1y p1y], [p1z p1z], 'Marker','o','MarkerSize',10,'Color',objcolor,'MarkerFaceColor',objcolor);
        
        if opt.arraysource  %Array-Source Distance
            %Length Measure
            lengthofvector = sqrt((p1x-0).^2+(p1y-0).^2+(p1z-0).^2);
            lengthofvector = round(opt.decimals*lengthofvector)/opt.decimals;
            line([p1x 0],[p1y 0], [p1z 0], 'Linestyle',':','Color','k');
            text((p1x-0)./2,(p1y-0)./2,(p1z-0)./2, [num2str(lengthofvector),'m'],'FontSize',8)
        end
    end
    
    if Objects(objectnumber,1) == 2 && opt.objects %Object Type Point
        p1x = Objects(objectnumber,5);
        p1y = Objects(objectnumber,6);
        p1z = Objects(objectnumber,7);
        line([p1x p1x],[p1y p1y], [p1z p1z], 'Marker','o','MarkerSize',3,'Color',objcolor,'MarkerFaceColor',objcolor);
    end
    
    if Objects(objectnumber,1) == 3 && opt.objects %Object Type Line
        p1x = Objects(objectnumber,5);
        p1y = Objects(objectnumber,6);
        p1z = Objects(objectnumber,7);
        p2x = Objects(objectnumber,8);
        p2y = Objects(objectnumber,9);
        p2z = Objects(objectnumber,10);
        line([p1x p2x],[p1y p2y], [p1z p2z], 'Color',objcolor);
        
        if opt.lengthobjects
            %Length Measure
            lengthofvector = sqrt((p1x-p2x).^2+(p1y-p2y).^2+(p1z-p2z).^2);
            lengthofvector = round(opt.decimals*lengthofvector)/opt.decimals;
            if lengthofvector > opt.minlength
                text((p2x+p1x)./2,(p2y+p1y)./2,(p2z+p1z)./2, [num2str(lengthofvector),'m'],'FontSize',8)
            end
        end
    end
    
    if Objects(objectnumber,1) == 4 && opt.objects %Object Type Triangle
        p1x = Objects(objectnumber,5);
        p1y = Objects(objectnumber,6);
        p1z = Objects(objectnumber,7);
        p2x = Objects(objectnumber,8);
        p2y = Objects(objectnumber,9);
        p2z = Objects(objectnumber,10);
        p3x = Objects(objectnumber,11);
        p3y = Objects(objectnumber,12);
        p3z = Objects(objectnumber,13);
        
        line([p1x p2x],[p1y p2y], [p1z p2z], 'Color',objcolor);
        line([p2x p3x],[p2y p3y], [p2z p3z], 'Color',objcolor);
        line([p3x p1x],[p3y p1y], [p3z p1z], 'Color',objcolor);
        
        
        if opt.lengthobjects
            %Length Measure
            lengthofvector = sqrt((p1x-p2x).^2+(p1y-p2y).^2+(p1z-p2z).^2);
            lengthofvector = round(opt.decimals*lengthofvector)/opt.decimals;
            if lengthofvector > opt.minlength
                text((p2x+p1x)./2,(p2y+p1y)./2,(p2z+p1z)./2, [num2str(lengthofvector),'m'],'FontSize',8)
            end
            
            lengthofvector = sqrt((p2x-p3x).^2+(p2y-p3y).^2+(p2z-p3z).^2);
            lengthofvector = round(opt.decimals*lengthofvector)/opt.decimals;
            if lengthofvector > opt.minlength
                text((p2x+p3x)./2,(p2y+p3y)./2,(p2z+p3z)./2, [num2str(lengthofvector),'m'],'FontSize',8)
            end
            
            lengthofvector = sqrt((p1x-p3x).^2+(p1y-p3y).^2+(p1z-p3z).^2);
            lengthofvector = round(opt.decimals*lengthofvector)/opt.decimals;
            
            if lengthofvector>opt.minlength
                text((p3x+p1x)./2,(p3y+p1y)./2,(p3z+p1z)./2, [num2str(lengthofvector),'m'],'FontSize',8)
            end
        end
        
        if opt.surfaceobjects
            %Vector 1c2c and Vector 1c1f (Triangle 1)
            X1X2 = [p2x,p2y,p2z]-[p1x,p1y,p1z];
            X1X3 = [p3x,p3y,p3z]-[p1x,p1y,p1z];
            ApartONE = 0.5*sqrt(sum(cross(X1X2,X1X3).^2));
            
            surfacequadrant = round(opt.decimals*ApartONE)/opt.decimals;
            if surfacequadrant >= opt.minsurf
                text(((p1x+p2x)./2+p3x)./2,((p1y+p2y)./2+p3y)./2,((p1z+p2z)./2+p3z)./2, [num2str(surfacequadrant),'m²'],'FontSize',8,'HorizontalAlignment','center')
            end
        end
    end
    
    if Objects(objectnumber,1) == 5 && opt.objects %Object Type Square
        p1x = Objects(objectnumber,5);
        p1y = Objects(objectnumber,6);
        p1z = Objects(objectnumber,7);
        p2x = Objects(objectnumber,8);
        p2y = Objects(objectnumber,9);
        p2z = Objects(objectnumber,10);
        p3x = Objects(objectnumber,11);
        p3y = Objects(objectnumber,12);
        p3z = Objects(objectnumber,13);
        p4x = Objects(objectnumber,14);
        p4y = Objects(objectnumber,15);
        p4z = Objects(objectnumber,16);
        
        line([p1x p2x],[p1y p2y], [p1z p2z], 'Color',objcolor);
        line([p2x p3x],[p2y p3y], [p2z p3z], 'Color',objcolor);
        line([p3x p4x],[p3y p4y], [p3z p4z], 'Color',objcolor);
        line([p4x p1x],[p4y p1y], [p4z p1z], 'Color',objcolor);
        
        
        
        if opt.lengthobjects
            %Length Measure
            lengthofvector = sqrt((p1x-p2x).^2+(p1y-p2y).^2+(p1z-p2z).^2);
            lengthofvector = round(opt.decimals*lengthofvector)/opt.decimals;
            if lengthofvector > opt.minlength
                text((p2x+p1x)./2,(p2y+p1y)./2,(p2z+p1z)./2, [num2str(lengthofvector),'m'],'FontSize',8)
            end
            lengthofvector = sqrt((p2x-p3x).^2+(p2y-p3y).^2+(p2z-p3z).^2);
            lengthofvector = round(opt.decimals*lengthofvector)/opt.decimals;
            if lengthofvector > opt.minlength
                text((p2x+p3x)./2,(p2y+p3y)./2,(p2z+p3z)./2, [num2str(lengthofvector),'m'],'FontSize',8)
            end
            lengthofvector = sqrt((p4x-p3x).^2+(p4y-p3y).^2+(p4z-p3z).^2);
            lengthofvector = round(opt.decimals*lengthofvector)/opt.decimals;
            if lengthofvector > opt.minlength
                text((p3x+p4x)./2,(p3y+p4y)./2,(p3z+p4z)./2, [num2str(lengthofvector),'m'],'FontSize',8)
            end
            lengthofvector = sqrt((p4x-p1x).^2+(p4y-p1y).^2+(p4z-p1z).^2);
            lengthofvector = round(opt.decimals*lengthofvector)/opt.decimals;
            if lengthofvector > opt.minlength
                text((p1x+p4x)./2,(p1y+p4y)./2,(p1z+p4z)./2, [num2str(lengthofvector),'m'],'FontSize',8)
            end
        end
        
        %Surface Object
        if opt.surfaceobjects
            %Vector 1c2c and Vector 1c1f (Triangle 1)
            X1X2 = [p2x,p2y,p2z]-[p1x,p1y,p1z];
            X1X3 = [p3x,p3y,p3z]-[p1x,p1y,p1z];
            ApartONE = 0.5*sqrt(sum(cross(X1X2,X1X3).^2));
            
            %Vector 1f2c and Vector 1f2f (Triangle 2)
            X4X3 = [p3x,p3y,p3z]-[p4x,p4y,p4z];
            X4X2 = [p2x,p2y,p2z]-[p4x,p4y,p4z];
            ApartTWO = 0.5*sqrt(sum(cross(X4X3,X4X2).^2));
            surfacequadrant = round(opt.decimals*(ApartONE+ApartTWO))/opt.decimals;
            if surfacequadrant >= opt.minsurf
                text((p2x+p4x)./2,(p2y+p4y)./2,(p2z+p4z)./2, [num2str(surfacequadrant),'m²'],'FontSize',8,'HorizontalAlignment','center')
            end
        end
    end
end

% PLOT HANDOVER POINT

if opt.handovers
    line([h1.x h1.x],[h1.y h1.y], [h1.z h1.z], 'Marker','+','MarkerSize',4,'Color','R','MarkerFaceColor','R');
    line([h2.x h2.x],[h2.y h2.y], [h2.z h2.z], 'Marker','+','MarkerSize',4,'Color','R','MarkerFaceColor','R');
end

%Surfacemesh
if opt.surfmesh
    plotmesh3d(1, 0.25, obj3d);
end

axis off;
grid off
colormap Jet;
axis equal
rotate3d on
set(gca,'Projection','orthographic');
alpha(.75)
lighting phong;
view(-52,36)


function plotmesh3d(radiusratio, meshsize, obj3d)

if nargin==0
    meshsize=0.1;
    radiusratio=1;
end

if nargin<2
    meshsize=0.1;
end

%To Cartesian Coordinates
[xc,yc,zc]=sph2cart(obj3d(:,1,1)/180*pi,-obj3d(:,2,1)/180*pi+pi/2,radiusratio*obj3d(:,3,1));

%Set Range for Meshgrid
rangeXc  = min(floor(xc)):meshsize:max(ceil(xc));
rangeYc  = min(floor(yc)):meshsize:max(ceil(yc));
[Xc,Yc] = meshgrid(rangeXc,rangeYc);

% Interpolation
Zc = griddata(xc,yc,zc,Xc,Yc,'cubic');

% Surface Plot
surf(Xc,Yc,Zc)
hold on

[xf,yf,zf] = sph2cart(obj3d(:,1,2)/180*pi,-obj3d(:,2,2)/180*pi+pi/2,radiusratio*obj3d(:,3,2));

rangeXf = min(floor(xf)):meshsize:max(ceil(xf));
rangeYf = min(floor(yf)):meshsize:max(ceil(yf));
[Xf,Yf] = meshgrid(rangeXf,rangeYf);

% Interpolation
Zf = griddata(xf,yf,zf,Xf,Yf,'cubic');

% Surface Plot
surf(Xf,Yf,Zf)
grid off
axis off


function surface = fcsurface(obj3d)

meshsize=0.01;

%To Cartesian Coordinates /Ceiling
[xc,yc,zc] = sph2cart(obj3d(:,1,1)/180*pi,-obj3d(:,2,1)/180*pi+pi/2,obj3d(:,3,1));

%Set Range for Meshgrid
rangeXc = min(floor(xc)):meshsize:max(ceil(xc));
rangeYc = min(floor(yc)):meshsize:max(ceil(yc));
[Xc,Yc] = meshgrid(rangeXc,rangeYc);

% Interpolation
try
    Zc = griddata(xc,yc,zc,Xc,Yc,'cubic');
catch
    surface.ceiling=0;
    surface.floor=0;
    return
end

[dimx,dimy]=size(Zc);

%delta X-Dimension
deltaHx=diff(Zc,1,2).^2;
deltaHx=sqrt(deltaHx+(meshsize).^2);

%delta Y-Dimension
deltaHy=diff(Zc,1,1).^2;
deltaHy=sqrt(deltaHy+(meshsize).^2);

%Extract same Dimensions
deltaHxS=deltaHx(1:dimx-1,1:dimy-1);
deltaHyS=deltaHy(1:dimx-1,1:dimy-1);

%Calc Surface
surfaces=(deltaHxS.*deltaHyS);
surfaces=surfaces(~isnan(surfaces));
surface.ceiling=round(10*sum(surfaces))/10;

% Floor
[xf,yf,zf]=sph2cart(obj3d(:,1,2)/180*pi,-obj3d(:,2,2)/180*pi+pi/2,obj3d(:,3,2));

rangeXf  = min(floor(xf)):meshsize:max(ceil(xf));
rangeYf = min(floor(yf)):meshsize:max(ceil(yf));
[Xf,Yf]=meshgrid(rangeXf,rangeYf);

%Interpolation
try
    Zf = griddata(xf,yf,zf,Xf,Yf,'cubic');
catch
    surface.ceiling=0;
    surface.floor=0;
    return
end

[dimx,dimy] = size(Zf);

%delta X-Dimension
deltaHx = diff(Zf,1,2).^2;
deltaHx = sqrt(deltaHx+(meshsize).^2);

%delta Y-Dimension
deltaHy = diff(Zf,1,1).^2;
deltaHy = sqrt(deltaHy+(meshsize).^2);

%Extract same Dimensions
deltaHxS = deltaHx(1:dimx-1,1:dimy-1);
deltaHyS = deltaHy(1:dimx-1,1:dimy-1);

%Calc Surface
surfaces = (deltaHxS.*deltaHyS);
surfaces = surfaces(~isnan(surfaces));
surface.floor = round(10*sum(surfaces))/10;


function RoomGeo = volume3d(obj3d)

meshsize = 0.1;

%To Cartesian Coordinates
[xc,yc,zc]=sph2cart(obj3d(:,1,1)/180*pi,-obj3d(:,2,1)/180*pi+pi/2,obj3d(:,3,1));

%Set Range for Meshgrid
rangeXc = min(xc):meshsize:max(xc);
rangeYc = min(yc):meshsize:max(yc);
[Xc,Yc] = meshgrid(rangeXc,rangeYc);

%Interpolation
Zc = griddata(xc,yc,zc,Xc,Yc,'cubic');

%Get average heigth
height = Zc(find(~isnan(Zc)));
meanceiling = mean(height);

%Calc Surface with polygauss2d (Gaussian Triangulation)
surfaceceiling=polygauss2([xc yc]);
RoomGeo.CeilingHeigthAVG=meanceiling;

[xf,yf,zf]=sph2cart(obj3d(:,1,2)/180*pi,-obj3d(:,2,2)/180*pi+pi/2,obj3d(:,3,2));
rangeXf = min(xf):meshsize:max(xf);
rangeYf = min(yf):meshsize:max(yf);
[Xf,Yf] = meshgrid(rangeXf,rangeYf);

%Interpolation
Zf = griddata(xf,yf,zf,Xf,Yf,'cubic');
height = Zf(find(~isnan(Zf)));
meanfloor = mean(height);
surfacefloor = polygauss2([xf yf]);
RoomGeo.FloorHeigth = meanfloor;

%Calc Room Volume
averageroomheigth = abs(meanfloor)+abs(meanceiling);
RoomVolume = round(10*averageroomheigth*(surfaceceiling+surfacefloor)/2)/10;

RoomGeo.RoomHeigth = averageroomheigth;
RoomGeo.RoomVolume = RoomVolume;


function surface = polygauss2(vectors)

surface = 0;

for index = 1:size(vectors,1)-1
    surface = surface+(vectors(index,1)+vectors(index+1,1))*...
        (vectors(index+1,2)-vectors(index,2));
end
lastindex = size(vectors,1);
surface = surface+(vectors(lastindex,1)+vectors(1,1))*...
    (vectors(1,2)-vectors(lastindex,2));

surface = abs(surface)/2;
